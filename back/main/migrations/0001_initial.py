# Generated by Django 3.1.5 on 2021-08-10 12:33

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=60, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Up to 13 digits allowed.', regex='^\\d{9}$')], verbose_name='Telefon raqam')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='middle nama')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile')),
                ('is_student', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Oxirgi aktiv holati')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Tizim Foydalanuvchisi',
                'verbose_name_plural': 'Tizim Foydalanuvchilari',
            },
            managers=[
                ('objects', main.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Test boshlanish vaqti')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Test tugash vaqti')),
                ('duration', models.PositiveIntegerField(default=40)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Contest',
                'verbose_name_plural': 'Contest',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('question', ckeditor.fields.RichTextField(verbose_name='Test savoli')),
                ('order', models.PositiveSmallIntegerField(default=1, verbose_name='Tartib raqami')),
            ],
            options={
                'verbose_name': 'Test savoli',
                'verbose_name_plural': 'Test savollari',
                'ordering': ['test', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('value', models.TextField(verbose_name='Javob varianti')),
                ('correct_answer', models.BooleanField(default=False, verbose_name="To'g'ri javob")),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='main.question', verbose_name='Test Savoli')),
            ],
            options={
                'verbose_name': 'Test savol varianti',
                'verbose_name_plural': 'Test savol variantlari',
                'ordering': ['question', '?'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('name', models.CharField(max_length=128, verbose_name='Fan nomi')),
                ('language', models.PositiveSmallIntegerField(choices=[(1, 'Rus'), (2, "O'zbek")], default=1)),
                ('status', models.BooleanField(default=True, verbose_name='Holati')),
            ],
            options={
                'verbose_name': 'Fan',
                'verbose_name_plural': 'Fanlar',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('name', models.CharField(max_length=128, verbose_name='Guruh nomi')),
                ('language', models.PositiveSmallIntegerField(choices=[(1, 'Rus'), (2, "O'zbek")], default=1)),
            ],
            options={
                'verbose_name': 'Guruh',
                'verbose_name_plural': 'Guruhlar',
            },
        ),
        migrations.CreateModel(
            name='UserTestAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('correct_answer', models.BooleanField(default=False, verbose_name="To'g'ri javob")),
                ('answer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.questionanswer', verbose_name='Foydalanuvchining javobi')),
                ('contest', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.contest')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.question', verbose_name='Savol')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Foydalanuvchi')),
            ],
            options={
                'verbose_name': 'Test foydalanuvchi javobi',
                'verbose_name_plural': 'Test foydalanuvchi javoblari',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('name', models.CharField(max_length=256, verbose_name='Test nomi')),
                ('status', models.BooleanField(default=False, verbose_name='Holati')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.subject', verbose_name='Fan')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Testlar',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='main.test', verbose_name='Test'),
        ),
        migrations.AddField(
            model_name='contest',
            name='group',
            field=models.ManyToManyField(to='main.UserGroup', verbose_name='Belgilangan guruhlar'),
        ),
        migrations.AddField(
            model_name='contest',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.subject', verbose_name='Fan'),
        ),
        migrations.AddField(
            model_name='contest',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.test'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='u_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.usergroup'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserTestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Boshlangan vaqti')),
                ('due_time', models.DateTimeField(blank=True, null=True, verbose_name="Tugatilishi kerak bo'lgan vaqt")),
                ('passed_date', models.DateTimeField(null=True, verbose_name='Topshirilgan vaqt')),
                ('correct_answers_count', models.IntegerField(null=True, verbose_name="To'g'ri")),
                ('incorrect_answers_count', models.IntegerField(null=True, verbose_name="Noto'g'ri")),
                ('percentage', models.PositiveIntegerField(null=True, verbose_name='Foiz')),
                ('point', models.PositiveIntegerField(null=True, verbose_name='Umumiy ball')),
                ('submitted', models.BooleanField(default=False, verbose_name='Topshirdi')),
                ('status', models.BooleanField(default=False)),
                ('contest', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.contest', verbose_name='Test')),
                ('questions', models.ManyToManyField(related_name='user_test_results', to='main.Question', verbose_name='Belgilangan savollar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Foydalanuvchi')),
            ],
            options={
                'verbose_name': 'Test natijasi',
                'verbose_name_plural': 'Test natijalari',
                'unique_together': {('user', 'contest')},
            },
        ),
    ]
